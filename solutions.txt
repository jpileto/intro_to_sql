Find all the robots from The Hitchhiker's Guide to the Galaxy.

intro_to_sql=# SELECT * FROM robots;
      name      |                source                |    personality     | id
----------------+--------------------------------------+--------------------+----
 GLaDOS         | Portal                               | passive-aggressive |  1
 WALL-E         | WALL-E                               | curious            |  2
 Marvin         | The Hitchhiker's Guide to the Galaxy | pessimistic        |  3
 C3PO           | Star Wars                            | anxious            |  4
 Mr. Butlertron | Clone High                           | compassionate      |  5
 Ava            | Ex Machina                           | clever             |  6
 Deep Thought   | The Hitchhiker's Guide to the Galaxy | thorough           |  7
 R2D2           | Star Wars                            | loyal              |  8
(8 rows)

intro_to_sql=# SELECT name, source FROM robots WHERE source LIKE '%Galaxy';
     name     |                source
--------------+--------------------------------------
 Marvin       | The Hitchhiker's Guide to the Galaxy
 Deep Thought | The Hitchhiker's Guide to the Galaxy
(2 rows)


Find the robot with an "anxious" personality.

intro_to_sql=# SELECT name, personality FROM robots WHERE personality = 'anxious';
 name | personality
------+-------------
 C3PO | anxious
(1 row)

Find all recipes that are nut free.

intro_to_sql=# SELECT name, nut_free FROM recipes WHERE nut_free = true;
                   name                    | nut_free
-------------------------------------------+----------
 Butternut Squash Bake                     | t
 Vegetarian Bibimbap                       | t
 French Veggie Loaf                        | t
 Quinoa and Black Beans                    | t
 Juicy Roasted Chicken                     | t
 Garlic Green Beans                        | t
 Stout Slow Cooker Corned Beef and Veggies | t
(7 rows)

Count the number of recipes that are gluten free but not vegetarian.

intro_to_sql=# SELECT name, gluten_free, vegetarian FROM recipes where gluten_free = true AND vegetarian = false;
                   name                    | gluten_free | vegetarian
-------------------------------------------+-------------+------------
 Juicy Roasted Chicken                     | t           | f
 Stout Slow Cooker Corned Beef and Veggies | t           | f
(2 rows)

intro_to_sql=# SELECT COUNT(name) FROM recipes WHERE gluten_free = true AND vegetarian = false;
 count
-------
     2
(1 row)

Find the animal with the most legs.

intro_to_sql=# SELECT * FROM animals;
       name       | number_of_legs | flying | swimming | egg_laying | id
------------------+----------------+--------+----------+------------+----
 cat              |              4 | f      | f        | f          |  1
 hammerhead shark |              0 | f      | t        | f          |  2
 octopus          |              8 | f      | t        | t          |  3
 duck             |              2 | t      | t        | t          |  4
 sheep            |              4 | f      | f        | f          |  5
 bat              |              2 | t      | f        | f          |  6
 owl              |              2 | t      | f        | t          |  7
 cow              |              4 | f      | f        | f          |  8
 chicken          |              2 | f      | f        | t          |  9
 whale            |              0 | f      | t        | f          | 10
(10 rows)

ntro_to_sql=# SELECT name, number_of_legs FROM animals ORDER BY number_of_legs DESC;
       name       | number_of_legs
------------------+----------------
 octopus          |              8
 sheep            |              4
 cat              |              4
 cow              |              4
 bat              |              2
 duck             |              2
 owl              |              2
 chicken          |              2
 whale            |              0
 hammerhead shark |              0
(10 rows)

Find the board game that takes the least amount of time to play.

intro_to_sql=# SELECT * FROM board_games;
          name          | max_players | min_players |    category    | mins_to_play | id
------------------------+-------------+-------------+----------------+--------------+----
 Arkham Horror          |           8 |           1 | strategy       |          240 |  1
 Dixit                  |           6 |           3 | party          |           30 |  2
 Carcassonne            |           5 |           2 | light strategy |           45 |  3
 Quarto                 |           2 |           2 | abstract       |           20 |  4
 7 Wonders              |           7 |           2 | strategy       |           30 |  5
 Agricola               |           5 |           1 | strategy       |          120 |  6
 Bohnanza               |           7 |           2 | light strategy |           45 |  7
 Cards Against Humanity |          30 |           5 | party          |           30 |  8
 Game of Things         |          15 |           2 | party          |           45 |  9
 Sushi Go               |           5 |           2 | party          |           15 | 10
 Quixo                  |           4 |           2 | abstract       |           15 | 11
 7 Wonders              |           7 |           2 | strategy       |           30 | 12
(12 rows)

intro_to_sql=# SELECT name, mins_to_play FROM board_games ORDER BY mins_to_play ASC;
          name          | mins_to_play
------------------------+--------------
 Sushi Go               |           15
 Quixo                  |           15
 Quarto                 |           20
 Cards Against Humanity |           30
 7 Wonders              |           30
 7 Wonders              |           30
 Dixit                  |           30
 Bohnanza               |           45
 Carcassonne            |           45
 Game of Things         |           45
 Agricola               |          120
 Arkham Horror          |          240
(12 rows)

Find the recipe that takes the most time to prepare.

ntro_to_sql=# SELECT name, minutes_required FROM recipes ORDER BY minutes_required DESC;                    name                    | minutes_required
-------------------------------------------+------------------
 Stout Slow Cooker Corned Beef and Veggies |              390
 French Veggie Loaf                        |              105
 Juicy Roasted Chicken                     |              100
 Butternut Squash Bake                     |               55
 Quinoa and Black Beans                    |               50
 Vegetarian Bibimbap                       |               50
 Couscous with Olives and Sun-Dried Tomato |               50
 Garlic Green Beans                        |               25
 Vietnamese Rice-Noodle Salad              |               15
(9 rows)

Find all the robots whose name starts with the letter M.

intro_to_sql=# SELECT name FROM robots WHERE name LIKE 'M%';
      name
----------------
 Marvin
 Mr. Butlertron
(2 rows)

Count the number of board games that can be played by 8 people.

intro_to_sql=# SELECT name, max_players FROM board_games WHERE max_players = 8;
     name      | max_players
---------------+-------------
 Arkham Horror |           8
(1 row)

Find the board game that supports the largest number of people.

intro_to_sql=# SELECT name, max_players FROM board_games ORDER BY max_players DESC;
          name          | max_players
------------------------+-------------
 Cards Against Humanity |          30
 Game of Things         |          15
 Arkham Horror          |           8
 7 Wonders              |           7
 7 Wonders              |           7
 Bohnanza               |           7
 Dixit                  |           6
 Carcassonne            |           5
 Sushi Go               |           5
 Agricola               |           5
 Quixo                  |           4
 Quarto                 |           2
(12 rows)

Find all animals that are swimming and egg-laying.

intro_to_sql=# SELECT * FROM animals;
       name       | number_of_legs | flying | swimming | egg_laying | id
------------------+----------------+--------+----------+------------+----
 cat              |              4 | f      | f        | f          |  1
 hammerhead shark |              0 | f      | t        | f          |  2
 octopus          |              8 | f      | t        | t          |  3
 duck             |              2 | t      | t        | t          |  4
 sheep            |              4 | f      | f        | f          |  5
 bat              |              2 | t      | f        | f          |  6
 owl              |              2 | t      | f        | t          |  7
 cow              |              4 | f      | f        | f          |  8
 chicken          |              2 | f      | f        | t          |  9
 whale            |              0 | f      | t        | f          | 10
(10 rows)

intro_to_sql=# SELECT name, swimming, egg_laying FROM animals WHERE swimming = true AND egg_
  name   | swimming | egg_laying
---------+----------+------------
 octopus | t        | t
 duck    | t        | t
(2 rows)

Find all animals that are swimming and egg-laying but not flying.
intro_to_sql=# SELECT name, swimming, egg_laying, flying FROM animals WHERE swimming = true AND egg_laying = true AND flying = false;
  name   | swimming | egg_laying | flying
---------+----------+------------+--------
 octopus | t        | t          | f
(1 row)
